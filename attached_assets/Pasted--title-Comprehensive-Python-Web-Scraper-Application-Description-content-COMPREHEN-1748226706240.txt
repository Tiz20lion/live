{
  `title`: `Comprehensive Python Web Scraper Application Description`,
  `content`: `**COMPREHENSIVE PYTHON WEB SCRAPER APPLICATION DESCRIPTION**

## Core Application Overview
A production-ready, Dockerized web scraping application that extracts leads from Apollo.io using the Apify API, with seamless integrations to Google Sheets and Notion databases, featuring a modern animated single-page web interface.

## Technical Architecture Requirements

### Backend Framework: FastAPI
- **Async Architecture**: Full async/await implementation for optimal performance
- **API Endpoints**: RESTful endpoints for scraping, sheet sync, and Notion operations
- **Security Features**: 
  - CSRF protection with token validation
  - Rate limiting (configurable: 10 req/min/IP default)
  - Security headers (CSP, XSS protection, HSTS)
  - Input validation middleware using Pydantic models
- **Logging**: Structured logging with Structlog (JSON format)
- **Health Monitoring**: Comprehensive health-check endpoint with service status
- **Credential Management**: Environment variables only (no hardcoded secrets)

### Data Scraping Engine
- **Primary Source**: Apollo.io via Apify API integration
- **Actor**: \"code_crafter/apollo-io-scraper\" 
- **Capabilities**:
  - Multi-URL processing with pagination handling
  - Async task processing with background jobs
  - Configurable lead count (1-1000+ range)
  - 10+ extractable fields (name, email, phone, company, title, location, industry, LinkedIn, Twitter, website)
  - Error handling with retry logic and exponential backoff
  - Data cleaning and validation

### Integration Services

#### Google Sheets API v4
- **Authentication**: Service account credentials via JSON
- **Operations**: Append-to-sheet functionality with auto-sheet creation
- **Features**: Batch processing, header management, data type handling
- **Error Handling**: Retry logic with tenacity decorator

#### Notion SDK-Py
- **Client**: AsyncClient with proper authentication
- **Operations**: Batch database uploads with schema validation
- **Features**: 
  - Property type mapping (title, rich_text, email, phone_number, url)
  - Rate limiting compliance (0.5s delays between batches)
  - Exponential backoff retry mechanism
  - Custom field handling

### Frontend Interface Requirements

#### UI Framework: Vanilla HTML/CSS/JavaScript
- **Layout**: Dual-panel responsive design using CSS Grid
- **Animation Libraries**: 
  - Animate.css for entrance animations
  - GSAP for smooth interactions and progress animations
- **Visual Features**:
  - Dark/light theme toggle with smooth transitions
  - Real-time progress bars with percentage indicators
  - Toast notifications (Toastr.js) for user feedback
  - Hover effects and micro-interactions

#### Left Panel Configuration:
- **Multi-URL Input**: Textarea supporting up to 10 Apollo.io URLs
- **Lead Count Slider**: Range input (1-1000+) with real-time value display
- **Multi-Select Dropdown**: Checkbox-based field selection with visual indicators
- **Action Button**: Animated start button with loading states

#### Right Panel Operations:
- **API Configuration**: Secure token inputs for Apify, Google, Notion
- **Progress Monitoring**: Real-time progress tracking with status updates
- **Results Preview**: Table displaying first 5 results with pagination
- **Export Options**: CSV/JSON download functionality
- **Sync Buttons**: One-click Google Sheets and Notion synchronization

### Docker Implementation

#### Container Specifications:
- **Base Image**: Python 3.11-slim for optimized size
- **Multi-stage Build**: Separate build and runtime stages
- **Port Exposure**: 8000 with configurable binding
- **Health Check**: Built-in Docker health monitoring
- **Environment Variables**: Full .env support with validation
- **Volume Mounting**: Optional for persistent logs

#### Production Features:
- **Process Management**: Uvicorn with proper signal handling
- **Resource Limits**: Memory and CPU constraints
- **Security**: Non-root user execution
- **Logging**: Structured JSON logs to stdout

### Security Implementation

#### Data Protection:
- **No Persistent Storage**: All data processing in-memory only
- **Credential Security**: Environment-based secret management
- **API Security**: Token validation and secure headers
- **CORS Configuration**: Restricted origin policies

#### Security Headers:
- Content Security Policy (CSP)
- X-Frame-Options: DENY
- X-Content-Type-Options: nosniff
- Strict-Transport-Security

### Performance Optimization

#### Async Processing:
- **Background Tasks**: Non-blocking scraping operations
- **Connection Pooling**: Efficient HTTP client management
- **Batch Processing**: Optimized bulk operations for external APIs
- **Caching Strategy**: In-memory task result caching

#### Rate Limiting:
- **Apify API**: Respectful request spacing
- **Google Sheets**: Batch operations with delays
- **Notion API**: Compliant rate limiting with retry logic

### Error Handling & Monitoring

#### Comprehensive Error Management:
- **Structured Logging**: All operations logged with context
- **Retry Mechanisms**: Exponential backoff for external API failures
- **User Feedback**: Clear error messages and recovery suggestions
- **Health Monitoring**: Service availability checks

#### Task Management:
- **Background Jobs**: UUID-based task tracking
- **Status Updates**: Real-time progress reporting
- **Result Storage**: Temporary in-memory result caching
- **Cleanup**: Automatic task result expiration

### File Structure & Organization:
```
app/
├── main.py (FastAPI application)
├── core/ (configuration, security, logging)
├── clients/ (apify, sheets, notion integrations)
├── api/ (routes and middleware)
├── models/ (Pydantic schemas)
└── static/ (frontend assets)
```

### Key Implementation Details:

#### Required Dependencies:
- fastapi, uvicorn, pydantic, structlog
- apify-client, google-api-python-client, notion-client
- tenacity (retry logic), python-multipart
- Security: python-jose, bcrypt

#### Environment Variables:
- APIFY_API_TOKEN, GOOGLE_SHEETS_CREDENTIALS
- NOTION_TOKEN, NOTION_DATABASE_ID
- SECRET_KEY, ALLOWED_ORIGINS
- RATE_LIMIT_REQUESTS, LOG_LEVEL

This application combines modern Python web development practices with robust integrations, security-first design, and a polished user experience, suitable for production deployment in containerized environments.`
}